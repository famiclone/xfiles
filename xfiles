#!/usr/bin/env zsh

autoload -U colors && colors

parent_cursor_pos=0
cursor_pos=0
cursor_type=">"
editor="vim"

function render_dir() {
  local files
  local dirs

  [[ $PWD == / ]] && PWD=

  for item in $PWD/*; do
    if [[ -d $item ]]; then
      dirs+=("$item")
    else
      files+=("$item")
    fi
  done


  items=("${dirs[@]}""${files[@]}")

  for ((i = 0; i < "${#items[@]}"; ++i)); do
    local item=${items[$i]}
    if [[ -d "${item}" ]]; then
      if [[ $cursor_pos == $i ]]; then
        echo "$bg[cyan]$fg_bold[black]${item}$reset_color"
      else
        echo "$fg_bold[cyan]${item}$reset_color"
      fi
    else
      if [[ $cursor_pos == $i ]]; then
        print "$bg[white]$fg[black]${item}$reset_color"
      else
        print "$fg[white]$item$reset_color"
      fi
    fi
  done
}

function change_dir() {
  cd $1
}

function render_statusbar() {

  # Save cursor position
  echo -n '\033[s'
  # Move cursor to last line
  echo -n '\033[999B'
  # Clear line
  echo -n '\033[2K'

  print -P -- "%{$bg[green]%}%{$fg_bold[black]%}  $cursor_pos  "

  # Restore cursor position
  echo -n '\033[u'
}

function clear() {
  echo -e "\033c" # clear
}

function render() {
  clear

  render_dir
  render_statusbar
}

function _xfiles_run() {

  #change_dir "$PWD"

  stty -echo # Turn off echo flag for terminal
  echo -ne "\e[?25l" # hide cursor

  while true; do
    render

    local item="${items[$cursor_pos]}"

    read -k1 key

    if [[ $key == "q" ]]; then
      clear
      break
    fi

    if [[ $key == "h" ]]; then
      cursor_pos=$parent_cursor_pos
      parent_cursor_pos=0
      change_dir "$(dirname $PWD)"
    fi

    if [[ $key == "j" ]]; then
      ((cursor_pos++ ))
    fi

    if [[ $key == "k" ]]; then
      if [[ $cursor_pos -gt 0 ]]; then
        ((cursor_pos-- ))
      fi
    fi

    if [[ $key == "l" ]]; then
      if [[ -d $item ]]; then
        if ! [[ -z $item ]]; then
          parent_cursor_pos=$cursor_pos
          cursor_pos=0
          change_dir $item
        fi
      else
        $editor $item
      fi
    fi

  done
  
  tput cnorm
}

function _xfiles_help() {
  print "
  
██╗  ██╗███████╗██╗██╗     ███████╗███████╗
╚██╗██╔╝██╔════╝██║██║     ██╔════╝██╔════╝
 ╚███╔╝ █████╗  ██║██║     █████╗  ███████╗
 ██╔██╗ ██╔══╝  ██║██║     ██╔══╝  ╚════██║
██╔╝ ██╗██║     ██║███████╗███████╗███████║
╚═╝  ╚═╝╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝
                                           

Usage:
  xfiles
  xfiles <command>

Commands:
  xfiles help           Show help
  xfiles upgrade        Show current and upgrade new version
  xfiles uninstall      Uninstall
"
}

function _xfiles_upgrade() {
  print "not implemented"
}

function _xfiles_uninstall() {
  print "not implemented"
}

function xfiles() {
  typeset -A subcommands=(
    help "_xfiles_help"
    upgrade "_xfiles_upgrade"
    uninstall "_xfiles_uninstall"
  )

  emulate -L zsh
  [[ -z "$subcommands[$1]" ]] && { _xfiles_run "$@"; return 1 } || ${subcommands[$1]}
}
